#!/usr/bin/env bash
set -euo pipefail

# ──────────────────────────────────────────────────────────────
# 사용법 (프로젝트 로컬)
#   ./gitx "[prefix] : Your commit message"   # 전체 워크플로우 (add → commit → push)
#   ./gitx commit "[prefix] : Your commit"    # git add → commit
#   ./gitx push                               # git fetch → push
#   ./gitx reset                            # 로컬 변경사항 버리기 (reset --hard, clean -fd)
#   ./gitx merge                              # 현재 브랜치를 main 브랜치로 병합
#   ./gitx fetch                              # 모든 원격 저장소 fetch (git fetch --all)
#   ./gitx checkout [branch명]                # 새 브랜치 생성 및 체크아웃
#   ./gitx merge-from <source-branch>         # <source-branch>를 현재 브랜치에 병합 & 푸시
#   ./gitx abort                              # 현재 진행 중인 병합 취소 (git merge --abort)
# ──────────────────────────────────────────────────────────────

do_commit() {
  git add .
  if [[ -z "${1:-}" ]]; then
    echo "❗️ commit 메시지를 \"[prefix] : message\" 형식으로 입력하세요."
    exit 1
  fi
  git commit -m "$1"
}

do_push() {
  git fetch
  branch=$(git rev-parse --abbrev-ref HEAD)
  git push origin "$branch"
}

do_reset() {
  echo "⚠️  로컬 변경사항을 모두 버립니다. (git reset --hard, git clean -fd)"
  read -p "계속하시겠습니까? (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "취소되었습니다."
    exit 1
  fi
  git reset --hard
  git clean -fd
  echo "✅ 로컬 변경사항이 모두 버려졌습니다."
}

do_merge() {
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$current_branch" == "main" ]]; then
    echo "❗️ 현재 브랜치가 이미 'main'입니다. 병합할 필요가 없습니다."
    exit 1
  fi

  # 두 번째 인자로 커밋 메시지를 받거나, 기본 메시지 사용
  merge_msg="${2:-"Merge branch '$current_branch' into main"}"

  echo "ℹ️ 현재 브랜치 '$current_branch'를 'main' 브랜치로 병합합니다."
  echo "ℹ️ 커밋 메시지: \"$merge_msg\""
  read -p "계속하시겠습니까? (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "취소되었습니다."
    exit 1
  fi

  echo "🔄 'main' 브랜치로 이동 중..."
  git checkout main
  echo "🔄 'main' 브랜치의 최신 변경사항을 가져오는 중..."
  git pull origin main
  echo "🔄 '$current_branch' 브랜치를 'main'으로 병합 중..."
  git merge "$current_branch" --no-ff -m "$merge_msg"
  echo "✅ '$current_branch' 브랜치가 'main'으로 병합되었습니다."
  echo "ℹ️ 변경사항을 원격 'main' 브랜치에 푸시하려면 './gitx push'를 실행하세요."
}

do_fetch() {
  echo "🔄 모든 원격 저장소에서 fetch 중..."
  git fetch --all
  echo "✅ fetch 완료."
}

do_checkout() {
  if [[ -z "${2:-}" ]]; then
    echo "❗️ 체크아웃할 브랜치 이름을 입력하세요. 사용법: ./gitx checkout [branch명]"
    exit 1
  fi
  branch_name=$2
  echo "ℹ️ 브랜치 '$branch_name' 생성 후 체크아웃 합니다."
  git checkout -b "$branch_name"
  echo "✅ 현재 브랜치: $(git rev-parse --abbrev-ref HEAD)"
}

do_merge_from() {
  if [[ -z "${2:-}" ]]; then
    echo "❗️ 병합할 소스 브랜치 이름을 입력하세요. 사용법: ./gitx merge-from <source-branch>"
    exit 1
  fi
  
  source_branch=$2
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  
  # 소스 브랜치 존재 여부 확인
  if ! git rev-parse --verify "$source_branch" &> /dev/null; then
    echo "❗️ 브랜치 '$source_branch'가 존재하지 않습니다."
    exit 1
  fi
  
  echo "ℹ️ 소스 브랜치 '$source_branch'를 현재 브랜치 '$current_branch'에 병합합니다."
  read -p "계속하시겠습니까? (y/N): " confirm
  if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    echo "취소되었습니다."
    exit 1
  fi
  
  echo "🔄 소스 브랜치 '$source_branch'의 최신 변경사항을 가져오는 중..."
  git fetch origin "$source_branch"
  
  echo "🔄 '$source_branch' 브랜치를 '$current_branch'에 병합 중..."
  git merge "$source_branch"
  
  echo "✅ '$source_branch' 브랜치가 '$current_branch'에 병합되었습니다."
  
  echo "🔄 변경사항을 원격 '$current_branch' 브랜치에 푸시 중..."
  git push origin "$current_branch"
  
  echo "✅ 병합 및 푸시가 완료되었습니다."
}

do_abort() {
  echo "ℹ️ 현재 진행 중인 병합을 취소합니다."
  if git merge --abort; then
    echo "✅ 병합이 취소되었습니다."
  else
    echo "❗️ 현재 진행 중인 병합이 없습니다."
    exit 1
  fi
}

cmd="${1:-}"

case "$cmd" in
  commit)
    if [[ -z "${2:-}" ]]; then
      echo "❗️ commit 메시지를 입력하세요. 사용법: ./gitx commit \"[prefix] : message\""
      exit 1
    fi
    do_commit "$2"
    ;;
  push)
    do_push
    ;;
  reset)
    do_reset
    ;;
  merge)
    do_merge "$@"
    ;;
  merge-from)
    do_merge_from "$@"
    ;;
  fetch)
    do_fetch
    ;;
  checkout)
    do_checkout "$@"
    ;;
  abort)
    do_abort
    ;;
  *)
    if [[ -z "$cmd" ]]; then
      echo "❗️ 사용법: ./gitx commit/push/reset/merge/merge-from/fetch/checkout/abort 또는 ./gitx \"[prefix] : message\""
      exit 1
    elif [[ "$cmd" == *" : "* ]]; then
        # 전체 워크플로우: commit + push
        do_commit "$cmd"
        do_push
    else
        echo "❗️ 잘못된 명령어 또는 커밋 메시지 형식입니다. 사용법을 확인하세요."
        echo "   ./gitx commit/push/reset/merge/merge-from/fetch/checkout/abort 또는 ./gitx \"[prefix] : message\""
        exit 1
    fi
    ;;
esac