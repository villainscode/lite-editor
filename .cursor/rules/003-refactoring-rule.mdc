---
description: 
globs: 
alwaysApply: false
---
# Refactoring Rule: JS Plugin Clean Architecture

## ✅ 목적
코드 일관성, 유지보수성 향상 및 공통 유틸 재활용을 위해 리팩토링 규칙을 정의한다.
항상 한국어로 수정 방향을 접근하고, 허락을 구한 뒤, 무엇이 수정되었고 어떤 문제가 해결되었는지 설명한다.

## 📌 적용 대상
- 모든 LiteEditor 기반 플러그인
- 커스텀 JS 기능 (모달, 드래그, 키보드 처리, DOM 삽입 등)
- 확장 플러그인 (Checklist, Media, Table 등)

---

## 📐 리팩토링 기본 원칙

### 1. ⚠️ **불필요한 코드 제거**
- 사용되지 않는 변수, import, event handler는 즉시 제거
- console.log는 `debug-utils.js`에 정의된 `DebugLog()`를 사용할 것

### 2. ♻️ **중복 코드 제거**
- 동일한 DOM 생성, 클래스 변경, range 처리 로직은 `PluginUtil.dom`, `PluginUtil.selection`을 사용할 것
- 유사한 함수는 공통 함수로 이동하거나 공통 모듈에서 호출

### 3. 🎯 **기능 분리**
- 파일이 **200 라인 초과** 시:
  - `core 기능`과 `확장 기능`을 분리
  - `core.js` vs `plugin-advanced.js` 식 분할 구성 제안
- UI 렌더링, 이벤트 등록, 비즈니스 로직 분리

### 4. 📦 **CSS 분리**
- `.style = {}`로 inline 처리된 경우 Tailwind 또는 `.css`로 분리
- `modal`, `floating-menu`, `resizer` 등은 `css/plugins/` 하위에 분리

---

## 🧩 모듈/공통 유틸 호출 규칙


---

## 🧪 테스트 기준

- 기존 기능에 영향이 없어야 함
- 최소 3가지 주요 시나리오에서 동작 검증
- `LiteEditorSelection` 관련 기능은 에디터 포커스 유지 필수
- Range API 사용 시, 텍스트 블록 외 삽입 여부도 검증

---

## ✅ 리팩토링 예시

```js
// Before
const span = document.createElement('span');
span.className = 'label';
span.textContent = label;
target.appendChild(span);

// After
const span = PluginUtil.dom.createElement('span', {
  className: 'label',
  textContent: label
});
target.appendChild(span);