---
description: 
globs: 
alwaysApply: false
---
---
description: "CSS, HTML, JavaScript 프로젝트를 위한 코딩 가이드라인"
globs: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx", "**/*.html", "**/*.css", "**/*.scss"]
alwaysApply: true
---

# 🌐 프론트엔드 코딩 가이드라인

## 1. 재사용성과 모듈화

- 컴포넌트 기반 아키텍처를 사용하여 UI를 구성합니다.
- 공통 기능은 별도의 유틸리티 함수로 분리하여 재사용합니다.
- 두번 이상 중복되는 기능은 공통 컴포넌트로 분리하여 재사용합니다.
- CSS는 BEM(Block Element Modifier) 방법론을 사용하여 모듈화합니다.
- 기능이 길어질 경우 Render 영역과 기능 영역의 분리를 고려하세요. 
- css, javascript, 외부 라이브러리등 애플리케이션에서 사용되는 모든 library는 하나의 파일로 분리하여 관리합니다. 

## 2. 일관된 네이밍 컨벤션

- 변수, 함수, 파일 이름은 camelCase를 사용합니다.
- 클래스 이름은 kebab-case를 사용합니다.
- 컴포넌트 이름은 PascalCase를 사용합니다.

## 3. 국제화(i18n)

- 모든 사용자 노출 텍스트는 i18n 라이브러리를 통해 처리합니다.
- 다국어 지원을 위해 리소스 파일을 사용합니다.

## 4. SEO 최적화

- 모든 페이지에 적절한 meta 태그를 포함합니다.
- 이미지에는 alt 속성을 추가합니다.
- 시맨틱한 HTML 태그를 사용합니다.

## 5. 브라우저 및 기기 호환성

- CSS는 벤더 프리픽스를 포함하여 작성합니다.
- 반응형 웹 디자인을 적용하여 다양한 화면 크기에 대응합니다.
- 주요 브라우저에서의 테스트를 수행합니다.

## 6. SOLID 원칙 적용

- 단일 책임 원칙(SRP): 각 모듈은 하나의 책임만을 가집니다.
- 개방-폐쇄 원칙(OCP): 기능 확장은 가능하되, 기존 코드는 수정하지 않습니다.
- 리스코프 치환 원칙(LSP): 하위 타입은 상위 타입을 대체할 수 있어야 합니다.
- 인터페이스 분리 원칙(ISP): 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫습니다.
- 의존성 역전 원칙(DIP): 고수준 모듈은 저수준 모듈에 의존하지 않아야 합니다.

## 7. 테스트 주도 개발(TDD)

- 테스트 케이스를 먼저 작성한 후 기능을 구현합니다.
- Jest, Mocha 등의 테스트 프레임워크를 사용합니다.

## 8. 클린 아키텍처

- 프레젠테이션, 도메인, 데이터 계층을 분리합니다.
- 각 계층은 명확한 책임을 가집니다.

## 9. 단순성 및 DRY 원칙

- 가장 단순한 솔루션을 우선시합니다.
- 중복 코드를 피하고, 공통 로직은 재사용합니다.

## 10. 테스트 가드레일

- 테스트 외의 환경에서는 모의 데이터를 사용하지 않습니다.
- 테스트는 실제 사용 환경을 최대한 반영합니다.

## 11. 효율성

- 명확성을 유지하면서 코드의 효율성을 고려합니다.
- 불필요한 연산이나 반복을 피합니다.

## 12. 디버깅 및 에러 처리

- 디버깅 시 원인과 해결책을 명확히 설명합니다.
- 에러 발생 시 상세 로그를 추가하여 원인을 분석합니다.
- 에러 해결보다 기능의 정상 동작을 우선시합니다.
- 항상 한국어로 수정 방향을 접근하고, 허락을 구한 뒤, 무엇이 수정되었고 어떤 문제가 해결되었는지 설명하세요.

## 13. 문서화 및 주석

- 모든 문서와 주석은 한국어로 작성합니다.
- 기술 용어나 라이브러리 이름은 원문을 유지합니다.

## 14. 커밋 규칙

- --no-verify 옵션은 사용하지 않습니다.
- 명확하고 일관된 커밋 메시지를 작성합니다.
- 커밋은 적절한 크기로 유지합니다.

## 15. 웹 표준 및 반응형 웹

- W3C 웹 표준을 준수합니다.
- 미디어 쿼리를 사용하여 다양한 기기에 대응합니다.