---
description: 
globs: 
alwaysApply: false
---
# Reset Plugin 상세 구현 명세서

## 1. 기능 개요
서식 초기화 플러그인은 선택된 텍스트 영역의 모든 서식(인라인 및 블록 레벨)을 제거하는 기능을 제공합니다.

## 2. 핵심 구성요소

### 2.1 상수 정의
```javascript
// 제거할 인라인 태그 목록
const INLINE_TAGS = ['B', 'I', 'U', 'STRONG', 'EM', 'MARK', 'SMALL', 'DEL', 'INS', 'SUB', 'SUP', 
                     'STRIKE', 'CODE', 'FONT', 'A', 'SPAN'];

// 제거할 블록 태그 목록
const BLOCK_TAGS = ['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE', 'UL', 'OL'];
```

### 2.2 모듈 구조

#### 2.2.1 SelectionManager - 선택 영역 관리 모듈
```javascript
const SelectionManager = {
  // 선택 영역에 마커 요소 생성
  createMarker: function(selection, text) {
    // 마커 요소 생성 및 스타일 적용
    const marker = document.createElement('p');
    marker.id = 'reset-selection-' + Date.now();
    marker.setAttribute('data-reset-marker', 'true');
    
    // white-space: pre-wrap 속성 적용 (여러 방법으로 보장)
    marker.style.cssText = 'white-space: pre-wrap !important';
    marker.setAttribute('style', 'white-space: pre-wrap !important');
    marker.style.whiteSpace = 'pre-wrap';
    marker.classList.add('reset-marker-style');
    
    // 선택 영역 내용을 마커로 대체
    const range = selection.getRangeAt(0);
    range.deleteContents();
    range.insertNode(marker);
    marker.textContent = text;
    
    return marker;
  },
  
  // 마커 요소 내용 선택
  selectMarkerContent: function(markerElement) {
    // 마커 내용을 선택 영역으로 설정
  },
  
  // 노드 참조를 사용하여 선택 복원
  restoreSelectionByReference: function(contentArea, startParent, startNode, startOffset, 
                                      endParent, endNode, endOffset) {
    // 노드 참조 기반으로 선택 영역 복원
  },
  
  // 텍스트 기반으로 선택 영역 복원
  restoreSelectionByText: function(contentArea, text) {
    // 텍스트 내용을 기반으로 선택 영역 복원
  },
  
  // 선택 영역 정보 수집
  getSelectionInfo: function(range, selection) {
    // 시작/종료 컨테이너, 오프셋, 텍스트 등 선택 정보 수집
  }
};
```

#### 2.2.2 FormatProcessor - 서식 처리 모듈
```javascript
const FormatProcessor = {
  // 인라인 태그 제거를 위한 함수
  removeInlineFormatting: function(container) {
    // execCommand('removeFormat') 사용
    // 수동으로 모든 INLINE_TAGS 제거 처리
  },

  // 블록 태그를 처리하는 함수
  processBlockElements: function(contentArea, range, startNode, endNode) {
    // 블록 요소를 찾아 p 태그로 변환
  },
  
  // 리스트 요소 처리
  processListElement: function(listElement) {
    // 리스트 아이템 내용 추출하여 줄바꿈이 있는 p 요소로 변환
    // 컴퓨티드 스타일을 보존하여 색상 등 유지
  },
  
  // 코드 블록 요소 처리
  processCodeElement: function(codeElement) {
    // 코드 내용 추출하여 줄바꿈과 공백이 보존된 p 요소로 변환
  },
  
  // 체크리스트 항목 처리
  processChecklistItems: function(checklistItems) {
    // 체크리스트 항목 텍스트를 추출하여 줄바꿈이 있는 p 요소로 변환
  },
  
  // 컨테이너의 하위 인라인 태그 제거
  removeNestedInlineTags: function(container, markerElement, range) {
    // 중첩된 인라인 태그를 찾아 텍스트 노드로 대체
  }
};
```

#### 2.2.3 StructureAnalyzer - 구조 분석 모듈
```javascript
const StructureAnalyzer = {
  // 컨테이너 노드에서 특정 구조 찾기
  detectStructure: function(container, range) {
    // 리스트, 코드블록, 체크리스트 등 특수 구조 감지
    // 결과 객체로 반환
  },

  // 감지된 구조에 따라 적절한 처리 실행
  processDetectedStructure: function(structure, range) {
    // 특수 구조별 처리 로직
  }
};
```

#### 2.2.4 ResetProcess - 전체 처리 흐름 관리
```javascript
const ResetProcess = {
  // 서식 초기화 전체 처리
  execute: function(contentArea) {
    // 1. 선택 영역 검증
    // 2. 선택 범위 및 정보 수집
    // 3. 구조 분석
    // 4. 특수 구조 처리
    // 5. 일반 서식 처리
    // 6. 마커 기반 처리
    // 7. 블록 요소 처리
    // 8. 인라인 태그 제거
    // 9. 기본 서식 제거 명령 실행
  }
};
```

### 2.3 로깅 및 오류 처리
```javascript
// 안전한 로깅 함수
const safeLog = function(message, data) {
  if (typeof ResetUtils !== 'undefined' && ResetUtils.log) {
    ResetUtils.log(message, data);
  } else {
    console.log('[RESET]', message, data);
  }
};

// 오류 로깅 처리
window.safeLogError = function(code, error) {
  // 오류 코드별 처리
};
```

### 2.4 스타일 설정
```javascript
// CSS를 head에 추가
const styleElement = document.createElement('style');
styleElement.textContent = `
  .reset-marker-style {
    white-space: pre-wrap !important;
  }
`;
document.head.appendChild(styleElement);
```

## 3. 주요 처리 흐름

1. 사용자가 텍스트 선택 후 서식 초기화 기능 실행
2. 선택 영역 정보 수집 및 유효성 검사
3. 구조 분석을 통해 특수 구조(리스트, 코드 블록 등) 감지
4. 특수 구조의 경우 전용 처리 로직 실행
5. 일반 텍스트의 경우:
   - 선택 영역을 마커로 교체
   - 블록 요소 처리 (p 태그로 통일)
   - 인라인 태그 제거
   - 기본 서식 제거 명령 실행
6. 선택 영역 복원

## 4. 특수 구조 처리

### 4.1 리스트 처리
- 리스트 아이템의 텍스트 추출
- 각 아이템 사이 줄바꿈 유지
- p 태그로 변환 시 white-space: pre-wrap 적용
- 원본 색상 등 스타일 보존

### 4.2 코드 블록 처리
- 코드 내용을 추출하여 공백과 들여쓰기 보존
- white-space: pre-wrap으로 형식 유지
- 원본 색상 보존

### 4.3 체크리스트 처리
- 체크리스트 항목 텍스트 추출
- 줄바꿈으로 구분된 일반 텍스트로 변환

## 5. 선택 영역 복원 메커니즘

### 5.1 노드 참조 기반 복원
- 원본 노드의 DOM 참조를 사용하여 복원
- 참조가 유효하지 않은 경우 대체 방법 사용

### 5.2 텍스트 기반 복원
- 변환된 텍스트 내용을 기반으로 새 선택 영역 생성
- 텍스트 노드 검색을 통한 선택 영역 위치 특정

## 6. 주의사항 및 제약

### 6.1 줄바꿈 처리
- 블록 요소 간 줄바꿈 보존이 중요
- white-space: pre-wrap 속성으로 시각적 줄바꿈 유지
- 리스트 및 코드 블록의 형식 보존에 특히 주의

### 6.2 성능 최적화
- 대규모 텍스트에서도 효율적으로 동작하도록 최적화
- 불필요한 DOM 조작 최소화
- 선택적 처리를 통한 연산 부하 감소

### 6.3 브라우저 호환성
- execCommand 사용과 직접 DOM 조작을 병행하여 호환성 확보
- 표준 DOM 메서드 우선 사용으로 크로스 브라우저 지원

## 7. 테스트 케이스

### 7.1 기본 기능 테스트
- 플러그인 등록 여부 확인
- 선택 영역 없을 때 오류 처리 확인
- execCommand 호출 확인

### 7.2 요소별 처리 테스트
- 블록 태그 처리 (h1-h6, blockquote 등)
- 리스트 요소 처리 (ul, ol)
- 코드 블록 처리 (code, pre)
- 선택 영역 정보 수집 
- 마커 요소 생성 및 속성 설정

### 7.3 복합 구조 테스트
- 여러 블록 요소에 걸친 선택
- 중첩된 인라인 요소 처리
- 리스트 내 서식 있는 텍스트 처리
