---
description: 
globs: 
alwaysApply: false
---
# Reset Plugin 상세 구현 명세서

## 1. 기능 개요
서식 초기화 플러그인은 선택된 텍스트 영역의 모든 서식(인라인 및 블록 레벨)을 제거하는 기능을 제공합니다.

## 2. 핵심 구성요소

### 2.1 상수 정의
```javascript
const INLINE_TAGS = ['B', 'I', 'U', 'STRONG', 'EM', 'STRIKE', 'S', 'SUB', 'SUP', 'MARK', 'SPAN', 'FONT', 'A'];
const BLOCK_TAGS = ['DIV', 'P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE', 'BLOCKQUOTE'];
const LIST_TAGS = ['UL', 'OL', 'LI'];
const CODE_TAGS = ['CODE', 'PRE'];
```

### 2.2 핵심 기능 구현

#### 2.2.1 선택 영역 마커 시스템
```javascript
// 선택 영역 표시 마커 생성
function createSelectionMarker(selection) {
  const range = selection.getRangeAt(0);
  const markerElement = document.createElement('p');
  markerElement.id = `reset-selection-${Date.now()}`;
  markerElement.setAttribute('data-reset-marker', 'true');
  markerElement.style.whiteSpace = 'pre-wrap !important';
  
  // 선택 영역 내용을 마커로 대체
  range.deleteContents();
  range.insertNode(markerElement);
  
  // 선택 영역 내용 복원
  markerElement.innerHTML = getSelectedHTML();
  
  return markerElement;
}

// 마커 기반으로 선택 영역 복원
function restoreSelection(markerElement) {
  if (!markerElement) return false;
  
  const newRange = document.createRange();
  newRange.selectNodeContents(markerElement);
  
  const selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(newRange);
  
  return true;
}
```

#### 2.2.2 인라인 서식 제거
```javascript
function removeInlineFormatting(element) {
  // 텍스트 내용 추출
  const textContent = element.textContent;
  
  // 새 텍스트 노드 생성
  const textNode = document.createTextNode(textContent);
  
  // 기존 내용 제거하고 텍스트 노드 삽입
  element.innerHTML = '';
  element.appendChild(textNode);
}
```

#### 2.2.3 블록 요소 처리
```javascript
function processBlockElements(markerElement) {
  // 선택 영역 내 블록 요소 찾기
  const blockElements = Array.from(markerElement.querySelectorAll(BLOCK_TAGS.join(',')));
  
  // 각 블록 요소 처리
  blockElements.forEach(block => {
    // 텍스트 내용 추출 (줄바꿈 유지)
    const textContent = block.textContent;
    
    // 부모 요소에 텍스트 노드로 대체
    const textNode = document.createTextNode(textContent + '\n');
    block.parentNode.replaceChild(textNode, block);
  });
}
```

#### 2.2.4 리스트 요소 처리
```javascript
function processListElements(markerElement) {
  // ul, ol 요소 찾기
  const listElements = Array.from(markerElement.querySelectorAll('ul, ol'));
  
  listElements.forEach(list => {
    const listItems = Array.from(list.querySelectorAll('li'));
    
    // 각 리스트 아이템을 텍스트로 변환하고 줄바꿈 추가
    const textContent = listItems.map(item => item.textContent).join('\n');
    const textNode = document.createTextNode(textContent + '\n');
    
    // 원래 리스트 대체
    list.parentNode.replaceChild(textNode, list);
  });
}
```

#### 2.2.5 코드 블록 처리
```javascript
function processCodeElements(markerElement) {
  // 코드 블록 요소 찾기
  const codeElements = Array.from(markerElement.querySelectorAll('pre, code'));
  
  codeElements.forEach(code => {
    // 코드 내용 추출 (공백과 줄바꿈 유지)
    const textContent = code.textContent;
    const textNode = document.createTextNode(textContent);
    
    // 원래 코드 블록 대체
    code.parentNode.replaceChild(textNode, code);
  });
}
```

#### 2.2.6 체크리스트 처리
```javascript
function processChecklistElements(markerElement) {
  // 체크리스트 요소 찾기 (div[data-checkbox-item] 또는 li.todo-list__item)
  const checklistItems = Array.from(markerElement.querySelectorAll('div[data-checkbox-item], li.todo-list__item'));
  
  checklistItems.forEach(item => {
    // 체크리스트 텍스트 추출
    const textContent = item.textContent;
    const textNode = document.createTextNode(textContent + '\n');
    
    // 원래 체크리스트 아이템 대체
    item.parentNode.replaceChild(textNode, item);
  });
}
```

### 2.3 메인 실행 함수
```javascript
function resetFormatting() {
  try {
    // 1. 현재 선택 영역 가져오기
    const selection = window.getSelection();
    if (!selection.rangeCount) return false;
    
    // 2. 선택 영역 마커 생성
    const markerElement = createSelectionMarker(selection);
    
    // 3. 서식 제거 처리
    // 3.1 인라인 서식 제거
    removeInlineFormatting(markerElement);
    
    // 3.2 블록 요소 처리
    processBlockElements(markerElement);
    
    // 3.3 리스트 처리
    processListElements(markerElement);
    
    // 3.4 코드 블록 처리
    processCodeElements(markerElement);
    
    // 3.5 체크리스트 처리
    processChecklistElements(markerElement);
    
    // 4. 선택 영역 복원
    restoreSelection(markerElement);
    
    // 5. 마커 요소 제거, 내용만 남기기
    const parent = markerElement.parentNode;
    while (markerElement.firstChild) {
      parent.insertBefore(markerElement.firstChild, markerElement);
    }
    parent.removeChild(markerElement);
    
    return true;
  } catch (error) {
    console.error('[ResetPlugin] 서식 초기화 실패', error);
    return false;
  }
}
```

## 3. 구현 주의사항

### 3.1 선택 영역 처리
- 선택 영역이 없을 경우 조기 반환
- 선택 영역이 여러 블록 요소에 걸쳐 있는 경우 모든 요소 처리
- 텍스트 노드만 선택된 경우 부모 블록 요소 확인 후 처리

### 3.2 줄바꿈 보존
- 블록 요소, 리스트, 코드 블록 처리 시 원래 요소 간 줄바꿈 유지
- white-space: pre-wrap을 사용하여 줄바꿈 시각적 표현 보존

### 3.3 예외 처리
- DOM 조작 중 발생할 수 있는 모든 예외 처리
- 빈 선택 영역, 유효하지 않은 선택 영역에 대한 방어 코드 포함

### 3.4 복잡한 구조 처리
- 중첩된 리스트 (UL 안의 OL, 또는 그 반대)
- 체크리스트 내 서브아이템
- 코드 블록 내 다른 서식 요소

## 4. 테스트 케이스

### 4.1 인라인 서식 테스트
- Bold, Italic, Underline 등이 혼합된 텍스트
- 링크가 포함된 텍스트
- 색상이 적용된 텍스트

### 4.2 블록 요소 테스트
- 여러 단락에 걸친 선택
- 제목(H1-H6)과 단락 혼합 선택

### 4.3 리스트 테스트
- 순서 있는 리스트
- 순서 없는 리스트
- 중첩 리스트

### 4.4 코드 블록 테스트
- 코드 블록 내 서식 있는 텍스트
- 들여쓰기와 공백이 있는 코드

### 4.5 체크리스트 테스트
- 체크된 항목과 체크되지 않은 항목 혼합
- 중첩된 체크리스트 항목

## 5. 성능 최적화
- 불필요한 DOM 조작 최소화
- 반복문에서 NodeList 대신 Array.from 사용
- 큰 문서에서도 효율적으로 동작하도록 최적화
