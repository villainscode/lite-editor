---
description: 
globs: 
alwaysApply: false
---
# Feature: Code highlighting with Speed-highlight JS

## 🎯 Goal
Implement a code block plugin using [Speed-highlight JS](mdc:https:/github.com/speed-highlight/core) that supports:
- Language-specific syntax highlighting
- Light-weight, performant code highlighting (only ~2KB for core + ~1KB per language)
- User-selectable languages
- Automatic language detection fallback

---

## ✅ Step 1: Insert a code block

### Summary
When the user clicks the `data_object` icon in the editor toolbar, a selection layer appears where they can:
- Enter their code in a textarea
- Select a language from the dropdown (or use auto-detection)
- Insert the formatted code block into the editor

The code block system in `codeBlock.js` will:
- Create a well-formatted code container
- Insert the escaped code content
- Dynamically apply syntax highlighting using Speed-highlight JS
- Auto-detect language when "자동 감지" is selected

### Implementation details

The plugin loads Speed-highlight JS resources from CDN:
```javascript
const CDN_SCRIPT = 'https://unpkg.com/@speed-highlight/core/dist/index.js';
const CDN_STYLE = 'https://unpkg.com/@speed-highlight/core/dist/themes/default.css';
const CDN_DETECT = 'https://unpkg.com/@speed-highlight/core/dist/detect.js';
```

Code blocks are created with the following structure:
```html
<div class="lite-editor-code-block">
  <div class="shj-lang-${language}">${escapedCode}</div>
</div>
```

Syntax highlighting is applied using:
```javascript
SpeedHighlight.highlightElement(element, language);
```

### Supported languages

The plugin supports the following languages:
```javascript
const LANGUAGES = [
  { value: "auto", label: "자동 감지" },
  { value: "bash", label: "Bash" },
  { value: "c", label: "C" },
  { value: "css", label: "CSS" },
  { value: "docker", label: "Docker" },
  { value: "go", label: "Go" },
  { value: "html", label: "HTML" },
  { value: "http", label: "HTTP" },
  { value: "java", label: "Java" },
  { value: "js", label: "JavaScript" },
  { value: "json", label: "JSON" },
  { value: "md", label: "Markdown" },
  { value: "plain", label: "Plain Text" },
  { value: "py", label: "Python" },
  { value: "rs", label: "Rust" },
  { value: "sql", label: "SQL" },
  { value: "ts", label: "TypeScript" },
  { value: "xml", label: "XML" },
  { value: "yaml", label: "YAML" }
];
```

### Behavior

1. When the user clicks the code block button, a layer appears with:
   - A text area for entering code
   - A language dropdown (default: "자동 감지")
   - An insert button

2. When the user inserts code:
   - Code is escaped to prevent HTML injection
   - If "자동 감지" is selected, the plugin uses `detectLanguage()` to determine the language
   - The code block is inserted at the current cursor position
   - Speed-highlight JS applies syntax highlighting

3. Styling:
   - The default theme from Speed-highlight JS is applied
   - Additional custom styles are defined in `css/plugins/codeBlock.css`
   - Code blocks are displayed with a rounded border, proper font family, and appropriate spacing

## ✅ Step 2: CSS and styling

### Code block styling

The code blocks are styled with CSS:
```css
/* 코드 블록 컨테이너 */
.lite-editor-code-block {
  border-radius: 4px;
  overflow: hidden;
}

/* 코드 영역 스타일 */
.lite-editor-code-block [class*="shj-lang-"] {
  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
  font-size: 13px;
  line-height: 1.5;
  padding: 1em;
  overflow-x: auto;
  white-space: pre;
  background-color: #f4f4f4 !important;  
  tab-size: 2;
}
```

### Input layer styling

The code input layer is also styled:
```css
/* 코드 입력 레이어 */
.lite-editor-code-block-layer {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 400px;
  z-index: 9999;
  position: fixed;
  display: block;
}

/* 코드 입력 폼 */
.lite-editor-code-block-form {
  padding: 10px;
}

/* 코드 입력 텍스트영역 */
.lite-editor-code-input {
  width: 100%;
  min-height: 100px;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
  font-size: 13px;
  resize: vertical;
  margin-bottom: 8px;
}
```

## 🔒 Implementation considerations

1. **Performance**: Speed-highlight JS is lightweight (~2KB core + ~1KB per language) and faster than alternative libraries like highlight.js and Prism.js

2. **Language detection**: When "자동 감지" is selected, the plugin uses `detectLanguage()` from Speed-highlight JS to analyze code and determine the appropriate language

3. **Error handling**: The plugin includes comprehensive error handling for loading scripts, inserting code blocks, and applying syntax highlighting

4. **Accessibility**: The dropdown menu includes proper ARIA attributes and keyboard navigation support

5. **Security**: User input is properly escaped to prevent XSS vulnerabilities

## 📝 Future enhancements

1. **Theme selection**: Add support for selecting different Speed-highlight JS themes
2. **Line numbers**: Implement optional line numbers for code blocks
3. **Copy button**: Add a button to copy code block content to clipboard
4. **Code folding**: Add support for collapsible code sections
5. **Local caching**: Implement local caching of Speed-highlight JS resources to reduce reliance on CDN