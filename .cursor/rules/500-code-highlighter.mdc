---
description: 
globs: 
alwaysApply: false
---
# Feature: Code highlighting with highlight.js

## üéØ Goal
Implement a code block plugin using [highlight.js](mdc:https:/highlightjs.readthedocs.io/en/latest) that supports:
- Language-specific syntax highlighting
- Block-specific theme settings
- User-selectable languages ‚Äã‚Äãand themes
- Highlight.js language auto-detection fallback

---

## ‚úÖ Step 1: Insert a basic code block

### Summary
When the user clicks the `data_object` icon in the editor toolbar, a selection layer appears where they can select a language and theme, which triggers the following actions in `codeBlock.js`:
- Insert an empty code block
- Set focus to the caret inside the new block
- Dynamically apply syntax highlighting using highlight.js based on the pasted code
- The selection layer defaults to auto for language and default for theme.
- highlight.js automatically detects the language using its internal highlightAuto() function if there is no explicit language specification in the code block. This function compares the code content to various language definitions and selects the language with the highest ‚Äúrelevance‚Äù score.

### Sample code 
// ÏΩîÎìú Î∏îÎ°ù ÏÇΩÏûÖ Ìï®Ïàò
function insertCodeBlock(language = 'auto', theme = 'default') {
  const pre = document.createElement('pre');
  const code = document.createElement('code');
  
  // Ïñ∏Ïñ¥ ÌÅ¥ÎûòÏä§ ÏÑ§Ï†ï
  if (language !== 'auto') {
    code.className = `language-${language}`;
  }
  
  code.contentEditable = true;
  code.spellcheck = false;
  code.innerText = ''; // Ï¥àÍ∏∞ ÎÇ¥Ïö©
  
  pre.appendChild(code);
  document.execCommand('insertHTML', false, pre.outerHTML);
  
  // Ìè¨Ïª§Ïä§ ÏÑ§Ï†ï
  setTimeout(() => {
    code.focus();
  }, 0);
  
  // ÌÖåÎßà Ï†ÅÏö©
  applyTheme(theme);
  
  // Íµ¨Î¨∏ Í∞ïÏ°∞ Ï†ÅÏö©
  if (language === 'auto') {
    hljs.highlightElement(code);
  } else {
    hljs.highlightBlock(code);
  }
}

### Behavior
- highlight.js is fetched via CDN, and the theme is applied via library.css file.

- Required styles (`highlight.js` theme file) should be fetched via CSS (not inline).
- CSS should be separated into a dedicated file (e.g. `code-highlight.css`).

### Supported languages ‚Äã‚Äã(selectable):

```js
[
'bash', 'cpp', 'csharp', 'css', 'curl', 'dart', 'django',
'go', 'html', 'java', 'javascript', 'json', 'kotlin',
'objectivec', 'php', 'properties', 'python', 'rust',
'typescript', 'xml', 'yaml', 'markdown', 'sql'
]
```

### Supported themes

/* Default styles */
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css'); /* Dark theme */
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/atom-one-dark.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/base16/dracula.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/monokai.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/base16/solarized-dark.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/vs2015.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/base16/nord.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/obsidian.min.css');
/* light theme */
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/base16/github.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/xcode.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/googlecode.min.css');
@import url('https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/idea.min.css');



### Note
‚Ä¢ If the language is not explicitly set, the default behavior is to auto-detect the language (supported by highlight.js).
‚Ä¢ If the implementation is successful, move on to step 2.

## ‚úÖ Step 2: Language and theme control per block

### Summary

You can add UI controls inside each code block to:
- Select language (top left dropdown)
- Select theme (top right dropdown)
- Since you have already selected the language and theme in the selection layer, this function will perform the change theme, change language functions.

### sample code 

Requirements
- Each block has a unique ID, and each block can have different languages ‚Äã‚Äãand themes.
- Changing the language/theme in one block should not affect other blocks.
- The dropdown should appear on click, not on hover.
- Theme changes should be applied to the block immediately.
- When changing the language, hljs.highlightElement() should be re-run.
- If you edit inside the block, the new language should be applied.

UI Design
‚Ä¢ Dropdowns use plain HTML <select> or Tailwind popovers.
‚Ä¢ Code blocks use the <pre><code class="language-xxx"></code></pre> structure.

Assets
‚Ä¢ Theme loaded via CDN from https://cdnjs.com/libraries/highlight.js
‚Ä¢ If the requested theme is not available, clearly state "This theme is not available on the CDN."

### üîí Constraints
‚Ä¢ Must not interfere with other plugins.
‚Ä¢ Initialization should be lightweight.
‚Ä¢ Language and theme lists should be easily extensible via settings.
‚Ä¢ Don't over-design. Copy the structure of the code-highlight.html file.
‚Ä¢ Use MutationObserver if needed to re-apply highlighting when code content changes.
‚∏ª