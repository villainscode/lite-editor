---
description: 
globs: 
alwaysApply: false
---
# 이미지 선택 및 조작 기능 개선 계획

## 1. 개요

LiteEditor의 이미지 기능을 강화하여 사용자가 더 쉽게 이미지를 선택하고 조작할 수 있도록 합니다. 기존 기능을 유지하면서 선택, 삭제, 이동 기능을 추가합니다.

## 2. 유지해야 할 현재 기능

- 이미지 URL을 통한 삽입 기능
- XSS 취약점 방지를 위한 보안 검증
- 이미지 리사이즈 핸들링 기능

## 3. 추가할 기능

- 클릭으로 이미지 선택
- 선택한 이미지 드래그 앤 드롭으로 에디터의 컨텐츠 영역에서 위치를 이동
- 선택한 이미지 삭제 (Delete/Backspace 키)

## 4. 구현 계획

### 4.1. 이미지 선택 메커니즘

```javascript
/**
 * 이미지 선택 기능 구현
 * - 이미지를 클릭했을 때 선택 상태로 전환
 * - 선택된 이미지는 시각적으로 표시됨
 */
function enhanceImageSelection() {
  const editor = document.querySelector('#lite-editor');
  
  // 클릭 이벤트 위임 처리
  editor.addEventListener('click', e => {
    // 이미지 래퍼 찾기
    const imageWrapper = findClosestImageWrapper(e.target);
    
    // 이미지 외부 클릭 시 선택 해제
    if (!imageWrapper) {
      if (window.LiteEditor.selectedImage) {
        window.LiteEditor.selectedImage.classList.remove('selected');
        window.LiteEditor.selectedImage = null;
      }
      return;
    }
    
    // 리사이즈 핸들 클릭은 무시 (기존 기능 유지)
    if (isResizeHandleClick(e, imageWrapper)) {
      return;
    }
    
    // 이미지 영역 클릭은 선택으로 처리
    e.preventDefault();
    selectImage(imageWrapper);
  });
}
```

### 4.2. 이미지 삭제 기능

```javascript
/**
 * 선택된 이미지 삭제 기능
 * - Delete/Backspace 키로 선택된 이미지 삭제
 */
function setupImageDeletion() {
  document.addEventListener('keydown', e => {
    // Delete 또는 Backspace 키 - 선택된 이미지가 있을 때만
    if ((e.key === 'Delete' || e.key === 'Backspace') && 
        window.LiteEditor.selectedImage) {
      
      e.preventDefault(); // 에디터 기본 동작 방지
      
      const selectedImage = window.LiteEditor.selectedImage;
      const editor = document.querySelector('#lite-editor');
      
      // 커서 위치 설정 (이미지가 있던 위치)
      const range = document.createRange();
      const nextNode = selectedImage.nextSibling || selectedImage.parentNode;
      
      // 이미지 제거
      selectedImage.remove();
      
      // 커서 위치 설정
      range.setStart(nextNode, 0);
      range.collapse(true);
      
      const selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      
      // 선택 상태 초기화
      window.LiteEditor.selectedImage = null;
      
      // 에디터 상태 업데이트
      util.editor.dispatchEditorEvent(editor);
    }
  });
}
```

### 4.3. 드래그 앤 드롭 이동 기능

```javascript
/**
 * 이미지 드래그 앤 드롭 구현
 * - 선택된 이미지를 드래그하여 다른 위치로 이동
 */
function setupImageDragging() {
  const editor = document.querySelector('#lite-editor');
  
  // 드래그 시작
  editor.addEventListener('dragstart', e => {
    const imageWrapper = findClosestImageWrapper(e.target);
    
    // 선택된 이미지만 드래그 가능
    if (!imageWrapper || !imageWrapper.classList.contains('selected')) {
      e.preventDefault();
      return;
    }
    
    // 리사이즈 핸들 드래그 시작은 무시
    if (isResizeHandleClick(e, imageWrapper)) {
      e.preventDefault();
      return;
    }
    
    // 드래그 데이터 설정
    e.dataTransfer.setData('application/lite-editor-image', 'true');
    e.dataTransfer.effectAllowed = 'move';
    imageWrapper.classList.add('dragging');
    
    // 드래그 중인 이미지 저장
    window.LiteEditor.draggedImage = imageWrapper;
  });
  
  // 드래그 종료
  editor.addEventListener('dragend', e => {
    if (window.LiteEditor.draggedImage) {
      window.LiteEditor.draggedImage.classList.remove('dragging');
    }
  });
  
  // 드롭 가능 영역 설정
  editor.addEventListener('dragover', e => {
    // 내부 이미지 드래그인 경우만 허용
    if (window.LiteEditor.draggedImage) {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    }
  });
  
  // 드롭 처리
  editor.addEventListener('drop', e => {
    e.preventDefault();
    
    if (!window.LiteEditor.draggedImage) return;
    
    const draggedImage = window.LiteEditor.draggedImage;
    draggedImage.classList.remove('dragging');
    
    // 드롭 위치 찾기
    const targetNode = document.elementFromPoint(e.clientX, e.clientY);
    let dropTarget = findDropTarget(targetNode);
    
    if (dropTarget && dropTarget !== draggedImage) {
      // 이미지 이동
      if (isBeforeTargetNode(e, dropTarget)) {
        dropTarget.parentNode.insertBefore(draggedImage, dropTarget);
      } else {
        dropTarget.parentNode.insertBefore(draggedImage, dropTarget.nextSibling);
      }
      
      // 에디터 변경 이벤트 발생
      util.editor.dispatchEditorEvent(editor);
    }
    
    // 선택 상태 유지
    selectImage(draggedImage);
    
    // 드래그 상태 초기화
    window.LiteEditor.draggedImage = null;
  });
}

/**
 * 드롭 대상이 마우스 위치의 전후 여부 확인
 */
function isBeforeTargetNode(event, target) {
  const rect = target.getBoundingClientRect();
  const offsetY = event.clientY - rect.top;
  const offsetX = event.clientX - rect.left;
  
  // 텍스트 노드이면 수평 기준, 블록 요소이면 수직 기준
  if (util.dom.isBlockElement(target)) {
    return offsetY < rect.height / 2;
  }
  return offsetX < rect.width / 2;
}
```

### 4.4. 방향키 이동 처리

```javascript
/**
 * 방향키 이동시 처리
 * - 이미지 선택 해제
 * - 자연스러운 커서 이동
 */
function setupArrowKeyNavigation() {
  document.addEventListener('keydown', e => {
    // 방향키 입력 처리
    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      // 이미지가 선택된 상태라면 선택 해제하고 커서 이동
      if (window.LiteEditor.selectedImage) {
        const img = window.LiteEditor.selectedImage;
        img.classList.remove('selected');
        
        // 방향에 따른 커서 위치 설정
        positionCursorNearImage(img, e.key);
        
        // 선택 상태 초기화
        window.LiteEditor.selectedImage = null;
        
        // 이벤트 중단 (기본 동작 대체)
        e.preventDefault();
      }
      // 이미지가 선택되지 않은 상태에서는 기본 방향키 동작 사용
    }
  });
}

/**
 * 이미지 주변에 커서 위치 설정
 */
function positionCursorNearImage(imageWrapper, direction) {
  const range = document.createRange();
  
  switch(direction) {
    case 'ArrowLeft':
      // 이미지 앞에 커서 위치
      range.setStartBefore(imageWrapper);
      break;
    case 'ArrowRight':
      // 이미지 뒤에 커서 위치
      range.setStartAfter(imageWrapper);
      break;
    case 'ArrowUp':
      // 이미지 앞 또는 이전 요소로 이동
      const prevNode = imageWrapper.previousSibling || imageWrapper.parentNode;
      range.setStart(
        prevNode.nodeType === Node.TEXT_NODE ? prevNode : prevNode.childNodes[0] || prevNode, 
        0
      );
      break;
    case 'ArrowDown':
      // 이미지 뒤 또는 다음 요소로 이동
      const nextNode = imageWrapper.nextSibling || imageWrapper.parentNode.nextSibling;
      if (nextNode) {
        range.setStart(nextNode, 0);
      } else {
        range.setStartAfter(imageWrapper);
      }
      break;
  }
  
  range.collapse(true);
  const selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(range);
}
```

## 5. 기존 기능과의 통합 및 충돌 방지

- 리사이즈 핸들 클릭 감지 및 기존 기능 유지
- 드래그 시작 시점에 리사이즈 동작과 구분
- XSS 방지 및 보안 검증 코드 유지
- 이미지 좌, 우, 상, 하 방향키의 이동이 원활해야 함 (이미지를 사이에 두고 이미지 이동 없이 방향키로 커서가 이동되어 텍스트를 입력하는데 지장이 없어야함)

## 6. 구현 단계

1. **기본 구조 설정 (0.5일)**
   - 플러그인 기본 구조 생성
   - 필요한 상태 관리 구조 설정
   - CSS 파일 생성 및 스타일 정의

2. **이미지 선택 구현 (0.5일)**
   - 클릭 이벤트 캡처 및 이미지 선택 기능 구현
   - 시각적 피드백(외곽선 등) 구현
   - 선택 해제 메커니즘 구현

3. **삭제 기능 구현 (0.5일)**
   - 키보드 이벤트 처리 (Delete/Backspace)
   - 이미지 요소 제거 및 커서 위치 조정
   - 삭제 후 에디터 상태 업데이트

4. **방향키 처리 구현 (1일)**
   - 이미지 주변 커서 이동 메커니즘 개발
   - 이미지 선택 상태와 방향키 상호작용 구현
   - 자연스러운 커서 위치 계산 알고리즘 구현

5. **드래그 앤 드롭 구현 (1일)**
   - 드래그 이벤트 처리
   - 드롭 위치 계산 및 요소 재배치
   - 드래그 중 시각적 피드백

6. **기존 기능과 통합 (0.5일)**
   - 리사이즈 기능과의 충돌 방지
   - 보안 검증과의 통합
   - 전체 동작 검증 및 버그 수정

7. **테스트 및 최적화 (1일)**
   - 각 기능별 테스트 실행
   - 성능 검증 및 최적화
   - 브라우저 호환성 테스트

## 7. 테스트 계획

- 이미지 선택 및 해제 테스트 -> 마우스 클릭시 이미지가 선택 되었다고 하더라도 방향키로 이미지 다음칸, 이전칸, 윗칸, 아랫칸에 이동시 이미지 선택 해제 
- 선택된 이미지 삭제 테스트 - del, backkspace 키로 삭제 
- 이미지 드래그 앤 드롭 이동 테스트 - 이미지를 드래그 하여 원하는 컨텐츠 영역 내로 이동 가능
- 방향키로 이미지 주변 이동 시 커서 위치 테스트 - 이미지는 변경이 없어야 함 
- 리사이즈 기능과 충돌 없는지 테스트
- 보안 검증 우회 가능성 테스트