---
description: 
globs: 
alwaysApply: false
---
---
description: "오픈소스 웹 에디터 기능 요구사항 정의서"
globs: ["**/*.js", "**/*.ts", "**/*.html", "**/*.css"]
alwaysApply: true
---

# 📝 오픈소스 웹 에디터 PRD

## 1. 개요

- 누구나 쉽게 소스 코드에 추가(Add-on)하여 사용할 수 있는 오픈소스 웹 에디터입니다.
- 에디터 영역을 초기화한 후 `contenteditable="true"`로 설정한 `editor-div`에서, 에디터의 기능을 클릭하면 표준 HTML 코드가 생성되어 해당 div 영역에 적용됩니다.
- 모든 개발 코드는 `.rules` 파일의 내용을 기반으로 작성됩니다.

## 2. 주요 기능

### 2.1 텍스트 서식 적용

- 마우스로 드래그하여 선택한 영역 또는 더블 클릭으로 지정한 영역에 대해 에디터 기능을 클릭했을 때 서식이 적용됩니다.
- 각 에디터 기능에는 자체적인 단축키를 지정해야 합니다.
  - 예: “Heading” 기능에서 h1 태그를 선택하면 macOS에서는 Command + 1, Windows에서는 Ctrl + 1 단축키가 적용됩니다.
  - 단축키가 지정되지 않은 경우, 해당 단축키를 `null` 또는 공백으로 설정하여 추후 추가할 수 있도록 해야 합니다.
- 아이콘을 클릭하여 태그가 적용된 상태에서도, 선택된 영역이 그대로 유지되어야 합니다.
- 선택한 영역에 HTML 태그를 적용한 후, 동일한 선택 영역에서 같은 아이콘을 다시 클릭하면 이미 적용된 HTML 태그가 제거되어야 합니다.
  - 예: bold 아이콘을 클릭하면 `<b>텍스트</b>`가 적용되지만, 동일한 영역에서 다시 bold 아이콘을 클릭하면 `<b>` 태그가 제거되어야 합니다.

### 2.2 실행 취소 및 재실행

- “되돌리기” 또는 “롤백” 명령을 실행하면, 현재 수행 중인 작업이 즉시 직전 상태로 복원되어야 합니다.
- 실행 취소 및 재실행(Undo/Redo) 기능은 OS에서 기본 제공하는 Command + Z, Command + Shift + Z와 동일하게 동작해야 합니다.

### 2.3 설정 레이어 기능

- 폰트, 제목(Heading), 색상(Color), 정렬(Align)과 같이 별도의 설정 레이어를 가진 아이콘은, `editor-div`에서 선택한 텍스트 블록에 최종적으로 설정 레이어에서 선택된 HTML 코드가 적용되어야 합니다.

### 2.4 서식 제거

- 서식 제거 아이콘은 선택된 블록에 적용된 HTML 코드를 제거합니다.

## 3. 확장성 및 유지보수

- 모든 에디터 기능 아이콘은 언제든지 추가하거나 삭제할 수 있는 구조를 가져야 합니다.
- 이 에디터는 사용자가 에디터 라이브러리를 다운로드한 후 소스에서 간단히 추가한 뒤 설치할 수 있어야 합니다.
- 프롬프트를 실행할 때, 별도로 언급하지 않는 한 기존 UI 요소를 해치거나, 레이어, 버튼, 기능 등을 임의로 삭제 또는 변경해서는 안 됩니다.
- 새로운 기능을 추가하거나 수정할 때, 기존에 작성된 코드를 먼저 분석해서 영향도를 파악합니다.
- 기능 단위로 CSS, JavaScript, HTML 파일을 작성합니다.
  - 예: 파일별 역할 분리에 따라 `core.css` (기본 구조 정의), 기본 레이아웃 구조 (`lite-editor`, `toolbar`, `content` 등) 기본 컨테이너 스타일, 에디터 영역 기본 서식 (`h1-h6`, `p`, `blockquote` 등)을 정의합니다.
  - `plugins.css` (확장 기능 정의)는 플러그인별 특화 스타일 (드롭다운, 색상 선택기 등), 확장 기능 UI 컴포넌트, 상호작용 요소 (hover, active 상태 등)를 정의합니다.
- 각 아이콘은 아이콘의 역할에 따라 `.js` 파일들을 분리하고 중복되는 소스들은 공통 컴포넌트로 작성한 뒤 제거합니다.
- 각 기능들은 서로 영향을 받지 않도록 작성합니다. 특정 기능을 추가할 경우 다른 소스에 영향을 주면 안 됩니다.

## 4. 개발 원칙

- 재사용성 및 모듈화를 우선 고려합니다.
- 일관된 네이밍 컨벤션을 유지합니다.
- 국제화(i18n) 요구사항을 고려합니다.
- SEO(검색 엔진 최적화)를 최적화합니다.
- 다양한 브라우저 및 기기와의 호환성을 보장합니다.
- SOLID 원칙을 사용해서 구현합니다:
  - 단일 책임 원칙 (Single Responsibility Principle)
  - 개방-폐쇄 원칙 (Open-Closed Principle)
  - 리스코프 치환 원칙 (Liskov Substitution Principle)
  - 인터페이스 분리 원칙 (Interface Segregation Principle)
  - 의존성 역전 원칙 (Dependency Inversion Principle)
- TDD로 구현합니다: 테스트 주도 개발 방식으로 먼저 테스트를 작성하고 구현합니다.
- Clean Architecture를 사용해서 구현합니다: 책임과 관심사를 명확히 분리하여 구현합니다.
- 단순성: 언제나 복잡한 솔루션보다 가장 단순한 솔루션을 우선시합니다.
- 중복 방지: 코드 중복을 피하고, 가능한 기존 기능을 재사용합니다 (DRY 원칙).
- 가드레일: 테스트 외에는 개발이나 프로덕션 환경에서 모의 데이터를 사용하지 않습니다.
- 효율성: 명확성을 희생하지 않으면서 토큰 사용을 최소화하도록 출력을 최적화합니다.
- 디버깅 시에는 원인 및 해결책을 설명하고 허락을 받은 다음 진행합니다.
- 에러 해결이 중요한 것이 아니라 제대로 동작하는 것이 중요합니다.
- 원인이 불분명할 경우 분석을 위해 상세 로그를 추가합니다.
- 한국어로 소통합니다.
- 문서와 주석도 한국어로 작성합니다.
- 기술적인 용어나 라이브러리 이름 등은 원문을 유지해도 됩니다.
- `--no-verify`를 절대 사용하지 않습니다.
- 명확하고 일관된 커밋 메시지를 작성합니다.
- 적절한 크기로 커밋을 유지합니다.
- 웹 표준, 반응형 웹을 고려합니다.

## 5. 문서화

- 주요 컴포넌트 개발 후에는 `/docs/[yyyy-mm-dd-component].md`에 간략한 요약을 기록합니다.


