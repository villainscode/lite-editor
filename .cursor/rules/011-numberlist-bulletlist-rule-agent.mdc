---
description: This rule governs the implementation of mixed ordered (ol) and unordered (ul) lists in web editors. It should be applied when: (1) Building or maintaining rich text editors with list functionality, (2) Implementing indentation controls for nested lists, (3) Debugging issues with list type preservation during indentation changes, (4) Styling nested list structures, or (5) Implementing tab key behavior for list manipulation. This rule ensures proper HTML structure, consistent styling, and correct behavior when mixing list types, especially when manipulating list depth with tab/shift+tab.
globs: 
alwaysApply: false
---
--- 
bullet list의 기능은 다음과 같아 
에디터의 컨텐츠 영역에서 블록을 선택한 뒤 bullet list를 클릭하면 아래와 같이 depth에 따라 bullet이 적용되어야 해 
depth는 계속 더 깊어질 수 있으므로 css 하드 코딩으로 해결할 수 없어.
•	1 depth: ● (disc)
•	2 depth: ○ (circle)
•	3 depth: ■ (square)
•	4 depth 이후부터는 다시 ●, ○, ■ 순으로 반복

depth 는 선택한 커서 위치에서 tab키로 indent 되어야 해 

rule 지침을 잘 따라서 작성해주고 @plugin-util.js 에 공통 요소들을 적용해서 간결하게 기능 코드를 작성해줘 
--- 
# Mixed Ordered and Unordered List Implementation

## Critical Rules

- Always properly nest list items by placing child lists (`ul` or `ol`) inside parent `li` elements, never directly inside another list
- Maintain correct list type during indentation changes by preserving the original list type when increasing/decreasing depth
- Explicitly set `list-style-type` in CSS for both `ul` and `ol` elements to prevent unintentional style inheritance
- Implement tab key handlers that check the parent list type before changing indentation to preserve list types
- Use CSS reset for list margins and consistent padding to ensure proper visual nesting
- Include proper left padding on nested lists (typically 1.5em) to create visual hierarchy
- Set `list-style-type: inherit` for deeply nested lists only when intentionally cascading styles
- When implementing JavaScript list manipulation, always check current list type before changing indentation
- Apply different list markers for different nesting levels to enhance visual hierarchy (disc → circle → square for `ul`)
- Ensure keyboard accessibility by implementing proper tab/shift+tab behavior for list manipulation

Step 1: Implement bullet list application to selection area
Apply bullet list only to current selection area
Save selection area before execution and find corresponding UL element after execution
Implement clear UL element identification logic
Step 2: Implement depth-based style application logic
Function to accurately calculate actual nesting depth of UL elements
Apply style (1→disc(●), 2→circle(○), 3→square(■)) according to depth
Apply style only to direct target UL
Step 3: Implement indent/outdent via Tab/Shift+Tab key
Add Tab key event handler
Implement direct DOM manipulation method to maintain standard HTML structure
Indent: Move current LI to the lower level of previous LI
Outdent: Move current LI to a higher level
Step 4: HTML standard structure verification and normalization
Detect and fix structures that do not conform to HTML standards
Ensure UL is always nested inside LI
Implement automatic normalization function for non-standard structures
Step 5: Debugging and stabilization
Add sufficient logging to all steps
Error handling and exception handling
Test various scenarios


## Examples

<example>
// Proper HTML nesting structure
<ul>
  <li>Bullet item 1
    <ol>
      <li>Numbered sub-item 1.1</li>
      <li>Numbered sub-item 1.2</li>
    </ol>
  </li>
  <li>Bullet item 2</li>
</ul>

// Proper CSS styling
ul, ol {
  margin: 0;
  padding-left: 1.5em;
}

ul {
  list-style-type: disc;
}

ol {
  list-style-type: decimal;
}

ul li ul,
ol li ol {
  margin: 0;
  padding-left: 1.5em;
}

// JavaScript tab key handler
function handleTabKey(event) {
  if (event.key === 'Tab') {
    event.preventDefault();
    const currentItem = getSelectedListItem();
    const parentList = currentItem.parentElement.parentElement;
    
    if (event.shiftKey) {
      // Outdent - preserve list type when moving outward
      decreaseDepth(currentItem, parentList.nodeName.toLowerCase());
    } else {
      // Indent - preserve current list type when moving inward
      increaseDepth(currentItem, parentList.nodeName.toLowerCase());
    }
  }
}
</example>

<example type="invalid">
// Incorrect HTML nesting (lists not inside li)
<ul>
  <li>Bullet item 1</li>
  <ol>
    <li>This is incorrect nesting</li>
  </ol>
  <li>Bullet item 2</li>
</ul>

// Missing explicit styles allows unintended inheritance
ul, ol {
  margin: 0;
  padding-left: 1.5em;
}
// Missing list-style-type declarations

// Incorrect tab handling that changes list types
function handleTabKey(event) {
  if (event.key === 'Tab') {
    event.preventDefault();
    const currentItem = getSelectedListItem();
    
    // Incorrect: Always creates ul regardless of parent type
    if (!event.shiftKey) {
      createNestedList('ul', currentItem);
    }
  }
}
</example>

/**
 * LiteEditor Bullet List Plugin
 * - 불릿 리스트 서식과 깊이별 스타일 적용 (선택한 리스트만 적용)
 * - 규칙: 011-numberlist-bulletlist-rule-agent.mdc
 */
(function() {
  // 플러그인 등록
  PluginUtil.registerPlugin('unorderedList', {
    title: 'Bullet List',
    icon: 'format_list_bulleted',
    action: function(contentArea, buttonElement, event) {
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      // 1. 실행 전 선택 영역 정보 저장
      const selection = window.getSelection();
      const savedRange = selection.rangeCount > 0 ? selection.getRangeAt(0).cloneRange() : null;
      
      // 실행 전 존재하는 UL 요소들 스냅샷 저장 (비교를 위해)
      const ulsBefore = Array.from(contentArea.querySelectorAll('ul'));
      
      // 에디터 영역에 포커스
      contentArea.focus();
      
      // 2. 불릿 목록 생성/삭제 명령 실행
      document.execCommand('insertUnorderedList', false, null);
      
      // 3. 명령 실행 후 선택된 영역의 UL 찾기
      setTimeout(() => {
        const targetUl = findTargetUl(contentArea, savedRange, ulsBefore);
        
        if (targetUl) {
          console.log('✅ 타겟 UL 찾음:', targetUl);
          // 다음 단계: 여기서 스타일 적용 함수 호출 예정
          // (2단계에서 구현할 함수)
        } else {
          console.warn('❌ 타겟 UL을 찾을 수 없음');
        }
      }, 10);
    }
  });
  
  /**
   * 선택한 영역에 해당하는 UL 요소를 찾는 함수
   * @param {HTMLElement} contentArea - 에디터 영역
   * @param {Range} savedRange - 저장된 선택 영역
   * @param {Array} ulsBefore - 명령 실행 전 존재하던 UL 요소들
   * @return {HTMLElement|null} 찾은 UL 요소 또는 null
   */
  function findTargetUl(contentArea, savedRange, ulsBefore) {
    // 1. 새로 생성된 UL 찾기 (가장 정확한 방법)
    const ulsAfter = Array.from(contentArea.querySelectorAll('ul'));
    const newUls = ulsAfter.filter(ul => !ulsBefore.includes(ul));
    
    if (newUls.length > 0) {
      console.log('🔍 새로 생성된 UL 발견');
      return newUls[0];
    }
    
    // 2. 선택 영역 주변에서 UL 찾기 (새 UL이 없는 경우)
    if (savedRange) {
      const container = savedRange.commonAncestorContainer;
      
      // 컨테이너가 직접 UL인 경우
      if (container.nodeName === 'UL') {
        console.log('🔍 선택 영역이 직접 UL');
        return container;
      }
      
      // 부모 중 UL 찾기
      let parent = container;
      while (parent && parent !== contentArea) {
        if (parent.nodeName === 'UL') {
          console.log('🔍 부모에서 UL 발견');
          return parent;
        }
        if (parent.nodeName === 'LI' && parent.parentNode && parent.parentNode.nodeName === 'UL') {
          console.log('🔍 부모 LI의 상위에서 UL 발견');
          return parent.parentNode;
        }
        parent = parent.parentNode;
      }
      
      // 자식 중 UL 찾기 (부모에서 못 찾은 경우)
      if (container.nodeType === Node.ELEMENT_NODE) {
        const childUl = container.querySelector('ul');
        if (childUl) {
          console.log('🔍 자식에서 UL 발견');
          return childUl;
        }
      }
    }
    
    // 3. 현재 선택 영역 기준으로 재확인
    const selection = window.getSelection();
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const container = range.commonAncestorContainer;
      
      if (container.nodeName === 'UL') {
        console.log('🔍 현재 선택 영역이 UL');
        return container;
      }
      
      let parent = container;
      while (parent && parent !== contentArea) {
        if (parent.nodeName === 'UL') {
          console.log('🔍 현재 부모에서 UL 발견');
          return parent;
        }
        if (parent.nodeName === 'LI' && parent.parentNode && parent.parentNode.nodeName === 'UL') {
          console.log('🔍 현재 부모 LI의 상위에서 UL 발견');
          return parent.parentNode;
        }
        parent = parent.parentNode;
      }
    }
    
    // 현재 선택된 텍스트 노드의 부모 노드의 가장 가까운 UL 찾기
    try {
      const currentNode = window.getSelection().getRangeAt(0).startContainer;
      const closestLi = currentNode.nodeType === Node.TEXT_NODE ? 
                        currentNode.parentNode.closest('li') : 
                        currentNode.closest('li');
      
      if (closestLi) {
        const parentUl = closestLi.closest('ul');
        if (parentUl) {
          console.log('🔍 현재 텍스트 노드 주변에서 UL 발견');
          return parentUl;
        }
      }
    } catch (e) {
      console.warn('선택 영역 분석 중 오류:', e);
    }
    
    return null; // 찾지 못한 경우
  }
})();
